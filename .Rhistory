abline(v = log(bestlam), col = "red", lwd = 2)
View(DF)
which.min(DF$mse)
abline(v = log(DF[which.min(DF$mse)],1), col = "red", lwd = 2)
abline(v = log(DF[which.min(DF$mse),1]), col = "red", lwd = 2)
abline(v = log(DF[which.min(DF$mse),1]), col = "green", lwd = 2)
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit = pcr(Salary~., data = Hitters, scale = TRUE)
pcr.fit = pcr(Salary~., data = Hitters, scale = TRUE, validation = "CV")
pcr.fit = pcr(Salary~., data = Hitters, scale = TRUE, validation = "Cv")
pcr.fit = pcr(Salary~., data = Hitters, scale = TRUE, validation = "CV")
summary(pcr.fit)
validationplot(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP")
validationplot(pcr.fit, val.type = "MSEP")
validationplot(pcr.fit, val.type = "RMSEP")
set.seed(1)
pcr.fit = pcr(Salary~., data = Hitters, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP")
data("nci")
View(nci)
data("melanoma")
View(melanoma)
x = model.matrix(time~., melanoma)
head(x)
x = x[,-1]
y = melanoma$time
train = sample(nrow(melanoma), 2/2*nrow(melanoma))
test = -train
test!=train
y.test = y[test]
grid = 10^seq(-10, 10, length = 1000)
lasso.mod = glmnet(x[train,], y[train], alpha = 1, lambda = grid)
ridge.mod = glmnet(x[train,], y[train], alpha = 0, lambda = grid)
x = rnorm(100)
e = rnorm(100)
y = 0.5 + 1.2 * x - 3/4 * x^2 + 4.3 * x^3 + e
plot(x,y)
plot(x,y, type = "l")
reg.full = regsubsets(y~x)
DF = data.frame(x=x, y=y)
reg.full = regsubsets(y~x, data = DF)
reg.full = regsubsets(y~poly(x,10), data = DF)
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2)
par(mar = rep(2, 4))
plot(reg.sum$adjr2)
plot(reg.sum$adjr2, type = "b")
dev.off()
plot(reg.sum$adjr2, type = "b")
par(mfrow = c(2,2))
plot(reg.sum$adjr2, type = "b")
plot(reg.sum$cp, type = "b")
plot(reg.sum$bic, type = "b")
reg.full = regsubsets(y~poly(x,10), data = DF)
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
reg.full = regsubsets(y~poly(x,10), data = DF, method = "forward")
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
?regsubsets
reg.full = regsubsets(y~poly(x,10), data = DF, method = "backwards")
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
reg.full = regsubsets(y~poly(x,10), data = DF, method = "backward")
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
reg.full = regsubsets(y~poly(x,10), data = DF, method = "forward")
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
reg.full = regsubsets(y~poly(x,10), data = DF)
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
reg.full = regsubsets(y~poly(x,10, raw = T), data = DF, nvmax = 10)
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
reg.full = regsubsets(y~poly(x,10, raw = T), data = DF, nvmax = 10, method = "forward")
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
reg.full = regsubsets(y~poly(x,10, raw = T), data = DF, nvmax = 10, method = "backward")
par(mfrow = c(2,2))
reg.sum <- summary(reg.full)
plot(reg.sum$adjr2, type = "b", ylab = "Adj. R^2")
plot(reg.sum$cp, type = "b", ylab = "Cp")
plot(reg.sum$bic, type = "b", ylab = "BIC")
x = model.matrix(y~poly(x,10, raw = TRUE), data = DF)
head(x)
x = x[,-1]
lasso.mod = glmnet(x, y, alpha = 1)
cv.out = cv.glmnet(x, y, alpha = 1)
bestlam = cv.out$lambda.min
plot(cv.out)
plot(cv.out)
par(mfrow = c(1,1,1,1))
dev.off()
par(mfrow = c(1,1,1,1))
plot(cv.out)
bestlam
exp(-1.5)
coef(cv.out, s = bestlam)
lasso.mod = glmnet(y~x, data = DF, alpha = 1, lambda = bestlam)
lasso.mod = glmnet(y~x,alpha = 1, lambda = bestlam)
lasso.mod = glmnet(x,y,alpha = 1, lambda = bestlam)
predict(lasso.mod, s = bestlam, type = "coefficients")
set.seed(1)
x = rnorm(100)
e = rnorm(100)
y = 0.5 + 1.2 * x - 3/4 * x^2 + 4.3 * x^3 + e
plot(x,y)
lasso.mod = glmnet(x,y,alpha = 1, lambda = bestlam)
x
DF = data.frame(x=x, y=y)
lasso.mod = glmnet(x,y,alpha = 1, lambda = bestlam)
cv.out = cv.glmnet(x, y, alpha = 1)
x
y
x = model.matrix(y~x, DF)
x = x[,-1]
cv.out = cv.glmnet(x, y, alpha = 1)
x
head(x)
x = model.matrix(y~poly(x, 10, raw = T), DF)
head(x)
x = x[,-1]
cv.out = cv.glmnet(x, y, alpha = 1)
bestlam - cv.out$lambda.min
plot(cv.out)
bestlam
lasso.mod = glmnet(x, y, alpha = 1, lambda = bestlam)
head(x)
predict(lasso.mod, s = bestlam, type = "coefficients")
library(leaps)
library(MASS)
library(leaps)
library(MASS)
library(ISLR)
library(glmnet)
data("Melanoma")
View(Melanoma)
library(ggplot2())
library(ggplot2)
attach(Melanoma)
plot(status, tie)
plot(status, time)
boxplot(status, time)
boxplot(as.factor(status), time)
str(melanoma)
str(melanoma)
str(Melanoma)
grid = 10^seq(-100, 100, by = 0.01)
length(grid)
x = model.matrix(time~., Melanoma)
train = sample(nrow(x), 2/3*nrow(x))
test = -train
test!=train
y = Melanoma$time
y.test = y[test]
ridge.mod = glmnet(x[train,], y[train], alpha = 0)
cv.ridge = cv.glmnet(x[train], y[train], alpha = 0)
?cv.glmnet
cv.ridge = cv.glmnet(x[train], y[train], alpha = 0)
cv.ridge = cv.glmnet(x[train,], y[train], alpha = 0)
ridge.cv = cv.ridge
rm(cv.ridge)
ridge.lam = ridge.cv$lambda.min
cv.lasso = cv.glmnet(x[train,], y[train], alpha = 1)
lasso.lam = lasso.cv$lambda.min
lasso.cv = cv.lasso
rm(cv.lasso)
lasso.lam = lasso.cv$lambda.min
plot(lasso.cv)
plot(ridge.cv)
lasso.pred = predict(lasso.cv, s = lasso.lam)
lasso.mod = glmnet(x[train,], y[train])
lasso.mod = glmnet(x[train,], y[train], alpha = 1)
ridge.mod = glmnet(x[train,], y[train], alpha = 0)
lasso.pred = predict(lasso.mod, s = lasso.lam)
lasso.pred = predict(lasso.mod, s = lasso.lam, newx = x[test,])
ridge.pred = predict(lasso.mod, s = ridge.lam, newx = x[test,])
mse <- function(preds, test_col){return(mean((preds - test_col)^2))}
mse(lasso.pred, y.test)
mse(ridge.pred, y.test)
reg.full = regsubsets(time~., data = Melanoma)
?regsubsets
reg.summ <- summary(reg.full)
plot(reg.summ)
plot(reg.summ$rsq)
plot(reg.summ$adjr2)
reg.full = regsubsets(time~., data = Melanoma[train,])
reg.summ <- summary(reg.full)
plot(reg.summ$rsq)
plot(reg.summ$adjr2)
(require(c('MASS', 'nnet')))
(require(c('MASS', 'nnet')))
round(rbinom(100))
round(rnorm(100))
?fill.na
??fill.na
library(slidify)
setwd("~/deja-dup/R/Coursera/shinyapp")
author("SF_crime_analysis")
slidify("index.Rmd")
#Kaggle crime analysis
library(data.table)
library(ggplot2)
library(ggmap)
library(dplyr)
library(lubridate)
library(RColorBrewer)
train <- fread("train.csv")
str(train)
#Change cols to factors (more convenient for ggplot)
train$date <- ymd_hms(train$Dates)
train$year <- year(train$date)
train$year <- as.factor(train$year)
train$Category <- as.factor(train$Category)
train$Descript <- as.factor(train$Descript)
train$DayOfWeek <- as.factor(train$DayOfWeek)
train$PdDistrict <- as.factor(train$PdDistrict)
train$Resolution <- as.factor(train$Resolution)
names(train)[8:9] <- c("lon", "lat")
cat_distr <- as.data.frame(table(train$Category, train$PdDistrict))
names(cat_distr) <- c("category", "district", "freq")
cat_distr = as.data.table(cat_distr)
distr_summ <- cat_distr[,sum(freq), by = district]
names(distr_summ)[2] <- "sum"
cat_total <- train %>% group_by(Category) %>% summarise(n())
names(cat_total)[2] <- "sum"
richmond <- train[train$PdDistrict == "RICHMOND"]
southern <- train[train$PdDistrict == "SOUTHERN"]
southern_resolution <- as.data.frame(table(southern$Resolution, southern$Category))
richmond_resolution <- as.data.frame(table(richmond$Resolution, richmond$Category))
names(southern_resolution) <- c("resolution", "category", "freq")
names(richmond_resolution) <- c("resolution", "category", "freq")
southern_resolution <- as.data.table(southern_resolution)
richmond_resolution <- as.data.table(richmond_resolution)
richmond_sum_by_cat <- richmond_resolution[,sum(freq), by = category]
southern_sum_by_cat <- southern_resolution[,sum(freq), by = category]
names(southern_sum_by_cat)[2] <- "sum"
names(richmond_sum_by_cat)[2] <- "sum"
southern_sum_by_cat <- arrange(southern_sum_by_cat, desc(sum))
southern_sum_by_cat$category <- factor(southern_sum_by_cat$category,
levels = as.character(southern_sum_by_cat$category))
richmond_sum_by_cat <- arrange(richmond_sum_by_cat, desc(sum))
richmond_sum_by_cat$category <- factor(richmond_sum_by_cat$category,
levels = as.character(richmond_sum_by_cat$category))
richmond_outcome <- richmond_resolution %>% group_by(resolution) %>% summarise(sum(freq))
southern_outcome <- southern_resolution %>% group_by(resolution) %>% summarise(sum(freq))
names(richmond_outcome)[2] <- "sum"
names(southern_outcome)[2] <- "sum"
cols <- colorRampPalette(c("gold", "blue"))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
train$hour <- hour(train$Dates)
count_by_hour_distr <- train[,.N, by = .(hour,PdDistrict)]
#Crime densities by year (2003 - 2015)
map <- get_map(location = "San Francisco", zoom = 14, maptype = "roadmap", source = "osm")
setwd("~/deja-dup/R/Coursera/shinyapp/SF_crime_analysis")
#Kaggle crime analysis
library(data.table)
library(ggplot2)
library(ggmap)
library(dplyr)
library(lubridate)
library(RColorBrewer)
train <- fread("train.csv")
str(train)
#Change cols to factors (more convenient for ggplot)
train$date <- ymd_hms(train$Dates)
train$year <- year(train$date)
train$year <- as.factor(train$year)
train$Category <- as.factor(train$Category)
train$Descript <- as.factor(train$Descript)
train$DayOfWeek <- as.factor(train$DayOfWeek)
train$PdDistrict <- as.factor(train$PdDistrict)
train$Resolution <- as.factor(train$Resolution)
names(train)[8:9] <- c("lon", "lat")
cat_distr <- as.data.frame(table(train$Category, train$PdDistrict))
names(cat_distr) <- c("category", "district", "freq")
cat_distr = as.data.table(cat_distr)
distr_summ <- cat_distr[,sum(freq), by = district]
names(distr_summ)[2] <- "sum"
cat_total <- train %>% group_by(Category) %>% summarise(n())
names(cat_total)[2] <- "sum"
richmond <- train[train$PdDistrict == "RICHMOND"]
southern <- train[train$PdDistrict == "SOUTHERN"]
southern_resolution <- as.data.frame(table(southern$Resolution, southern$Category))
richmond_resolution <- as.data.frame(table(richmond$Resolution, richmond$Category))
names(southern_resolution) <- c("resolution", "category", "freq")
names(richmond_resolution) <- c("resolution", "category", "freq")
southern_resolution <- as.data.table(southern_resolution)
richmond_resolution <- as.data.table(richmond_resolution)
richmond_sum_by_cat <- richmond_resolution[,sum(freq), by = category]
southern_sum_by_cat <- southern_resolution[,sum(freq), by = category]
names(southern_sum_by_cat)[2] <- "sum"
names(richmond_sum_by_cat)[2] <- "sum"
southern_sum_by_cat <- arrange(southern_sum_by_cat, desc(sum))
southern_sum_by_cat$category <- factor(southern_sum_by_cat$category,
levels = as.character(southern_sum_by_cat$category))
richmond_sum_by_cat <- arrange(richmond_sum_by_cat, desc(sum))
richmond_sum_by_cat$category <- factor(richmond_sum_by_cat$category,
levels = as.character(richmond_sum_by_cat$category))
richmond_outcome <- richmond_resolution %>% group_by(resolution) %>% summarise(sum(freq))
southern_outcome <- southern_resolution %>% group_by(resolution) %>% summarise(sum(freq))
names(richmond_outcome)[2] <- "sum"
names(southern_outcome)[2] <- "sum"
cols <- colorRampPalette(c("gold", "blue"))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
train$hour <- hour(train$Dates)
count_by_hour_distr <- train[,.N, by = .(hour,PdDistrict)]
#Crime densities by year (2003 - 2015)
map <- get_map(location = "San Francisco", zoom = 14, maptype = "roadmap", source = "osm")
setwd("~/deja-dup/R/Coursera/shinyapp")
#Kaggle crime analysis
library(data.table)
library(ggplot2)
library(ggmap)
library(dplyr)
library(lubridate)
library(RColorBrewer)
train <- fread("train.csv")
str(train)
#Change cols to factors (more convenient for ggplot)
train$date <- ymd_hms(train$Dates)
train$year <- year(train$date)
train$year <- as.factor(train$year)
train$Category <- as.factor(train$Category)
train$Descript <- as.factor(train$Descript)
train$DayOfWeek <- as.factor(train$DayOfWeek)
train$PdDistrict <- as.factor(train$PdDistrict)
train$Resolution <- as.factor(train$Resolution)
names(train)[8:9] <- c("lon", "lat")
cat_distr <- as.data.frame(table(train$Category, train$PdDistrict))
names(cat_distr) <- c("category", "district", "freq")
cat_distr = as.data.table(cat_distr)
distr_summ <- cat_distr[,sum(freq), by = district]
names(distr_summ)[2] <- "sum"
cat_total <- train %>% group_by(Category) %>% summarise(n())
names(cat_total)[2] <- "sum"
richmond <- train[train$PdDistrict == "RICHMOND"]
southern <- train[train$PdDistrict == "SOUTHERN"]
southern_resolution <- as.data.frame(table(southern$Resolution, southern$Category))
richmond_resolution <- as.data.frame(table(richmond$Resolution, richmond$Category))
names(southern_resolution) <- c("resolution", "category", "freq")
names(richmond_resolution) <- c("resolution", "category", "freq")
southern_resolution <- as.data.table(southern_resolution)
richmond_resolution <- as.data.table(richmond_resolution)
richmond_sum_by_cat <- richmond_resolution[,sum(freq), by = category]
southern_sum_by_cat <- southern_resolution[,sum(freq), by = category]
names(southern_sum_by_cat)[2] <- "sum"
names(richmond_sum_by_cat)[2] <- "sum"
southern_sum_by_cat <- arrange(southern_sum_by_cat, desc(sum))
southern_sum_by_cat$category <- factor(southern_sum_by_cat$category,
levels = as.character(southern_sum_by_cat$category))
richmond_sum_by_cat <- arrange(richmond_sum_by_cat, desc(sum))
richmond_sum_by_cat$category <- factor(richmond_sum_by_cat$category,
levels = as.character(richmond_sum_by_cat$category))
richmond_outcome <- richmond_resolution %>% group_by(resolution) %>% summarise(sum(freq))
southern_outcome <- southern_resolution %>% group_by(resolution) %>% summarise(sum(freq))
names(richmond_outcome)[2] <- "sum"
names(southern_outcome)[2] <- "sum"
cols <- colorRampPalette(c("gold", "blue"))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
train$hour <- hour(train$Dates)
count_by_hour_distr <- train[,.N, by = .(hour,PdDistrict)]
#Crime densities by year (2003 - 2015)
map <- get_map(location = "San Francisco", zoom = 14, maptype = "roadmap", source = "osm")
ggmap(map) + stat_density2d(aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),
data = train,
bins = 10,
geom = "polygon") +
scale_fill_gradient(low = "black", high = "red", "Crime\ndensity")
#Sum of crimes by district
#cat_distr <- arrange(cat_distr, desc(freq))
#cat_distr$district <- factor(cat_distr$district, levels = as.character(cat_distr$district))
g <- ggplot(cat_distr, aes(reorder(district, -freq), freq))
g + geom_bar(stat = "identity", fill = cols(390)) +
geom_hline(yintercept = mean(distr_summ$sum),
col = "red", lwd = 1.2, lty = 2, alpha = 0.7) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
title = element_text(size = 18),
plot.title = element_text(face = "bold")) +
xlab("District") +
ylab("Sum of crimes") +
ggtitle("Sum of all crimes by district") +
coord_flip()
#Barplot of top 10 crimes in Southern district
ggplot(southern_sum_by_cat[1:10], aes(category, sum)) +
geom_bar(stat="identity", fill = cols(10), col = "black") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
title = element_text(size = 18),
plot.title = element_text(face = "bold")) +
xlab("Crime category") +
ylab("Sum of crimes") +
ggtitle("Top 10 crimes in Southern district, SF") +
coord_flip()
#Barplot of top 10 crimes in Richmond district
ggplot(richmond_sum_by_cat[1:10], aes(category, sum)) +
geom_bar(stat="identity", fill = cols(10), col = "black") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
title = element_text(size = 18),
plot.title = element_text(face = "bold")) +
xlab("Crime category") +
ylab("Sum of crimes") +
ggtitle("Top 10 crimes in Richmond district, SF") +
coord_flip()
#Barplot of resolution frequency in Southern district
ggplot(southern_outcome, aes(reorder(resolution, -sum), sum)) +
geom_bar(stat = "identity", fill = cols(nrow(southern_outcome)), col = "black") +
coord_flip() +
ylab("Sum of crimes") +
xlab("Resolution") +
ggtitle("Top resolutions in the Southern district") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
title = element_text(size = 18),
plot.title = element_text(face = "bold"))
#Barplot of resolution frequency in Richmond district
ggplot(richmond_outcome, aes(reorder(resolution, -sum), sum)) +
geom_bar(stat = "identity", fill = cols(nrow(southern_outcome)), col = "black") +
coord_flip() +
ylab("Sum of crimes") +
xlab("Resolution") +
ggtitle("Top resolutions in the Richmond district") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
title = element_text(size = 18),
plot.title = element_text(face = "bold"))
#Barplot of top crime categories
ggplot(cat_total, aes(reorder(Category, -sum), sum)) +
geom_bar(stat = "identity",
fill = cols(nrow(cat_total)),
col = "black") + coord_flip() +
ylab("Sum of crimes") +
xlab("Crime category") +
ggtitle("Top crime categories") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
title = element_text(size = 18),
plot.title = element_text(face = "bold"))
#Barplot of top crime resolutions by category for the Southern district
ggplot(southern_resolution, aes(reorder(resolution, -freq), freq, group = category)) +
geom_bar(stat = "identity", aes(fill = category)) +
coord_flip() +
ylab("Sum") +
xlab("Resolution") +
ggtitle("Top resolutions by crime type in the Southern district") +
theme(title = element_text(size = 18),
plot.title = element_text(face = "bold")) +
scale_fill_manual(values = col_vector, name = "Crime category")
#Barplot of top crime resolutions by category for the Richmond district
ggplot(richmond_resolution, aes(reorder(resolution, -freq), freq, group = category)) +
geom_bar(stat = "identity", aes(fill = category)) +
coord_flip() +
ylab("Sum") +
xlab("Resolution") +
ggtitle("Top resolutions by crime type in the Richmond district") +
theme(title = element_text(size = 18),
plot.title = element_text(face = "bold")) +
scale_fill_manual(values = col_vector, name = "Crime category")
---
title       : San Franisco crime data analysis with Shiny
subtitle    :
author      : Przemyslaw Zientala
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Motivation
1. Crime is a serious social problem
2. Data-driven approaches are very useful for discovering crime patterns
3. Interactive data visualization tools are heavily used to aid law enforcement authorities make informed decisions
4. Interactive, easy-to-use and quickly modifiable Shiny web apps are perfect for such tasks
--- .class #id
## Slide 2
slidify("index.Rmd")
setwd("~/deja-dup/R/Coursera/shinyapp")
author("crime_nalaysis")
setwd("~/deja-dup/R/Coursera/shinyapp/SF_crime_analysis")
slidify("index.Rmd")
slidify("index.Rmd")
shiny::runApp('~/deja-dup/R/Coursera/shinyapp')
